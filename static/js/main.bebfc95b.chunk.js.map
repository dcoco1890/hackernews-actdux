{"version":3,"sources":["utils/constants.js","utils/reducers.js","utils/API.js","utils/actions.js","utils/store.js","comps/QueryListItem.js","comps/Form.js","views/Nav.js","comps/Button.js","comps/ViewButton.js","comps/Header.js","comps/ArticleCard.js","views/ArticleList.js","views/Main.js","App.js","serviceWorker.js","index.js"],"names":["articleView","SET_VIEW","GET_FRONT_PAGE","rootReducer","combineReducers","selectView","state","action","type","filter","articles","isFetching","Object","assign","data","queries","query","axios","get","setArticleView","receiveData","receivedAt","Date","now","fetchArticles","dispatch","API","then","response","resp","hits","fetchQuery","queryTerm","store","createStore","applyMiddleware","thunkMiddleware","console","log","getState","QueryListItem","props","id","onClick","className","item","Form","connect","save","term","search","searchTerm","useState","userInput","setUserInput","style","border","padding","value","onChange","e","target","placeholder","name","preventDefault","styles","display","backgroundColor","color","nav","Nav","map","key","Button","active","text","pointerEvents","ViewButton","fetchFront","fetchNew","x","y","paddingRight","width","height","justifyContent","alignItems","head","fontSize","text0","textAlign","marginLeft","Header","borderBottom","outerCard","cursor","maxWidth","flexGrow","flexDirection","margin","fontFamily","fontWeight","text2","ArticleCard","title","author","points","url","href","rel","ArticleList","flexWrap","i","Main","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.bebfc95b.chunk.js","sourcesContent":["// Constants, set this up because every tutorial says to do so\r\n\r\n// view filter, i.e wchich articles to show\r\nexport const articleView = {\r\n  GET_FRONT_PAGE: \"GET_FRONT_PAGE\",\r\n  GET_RECENT_POSTS: \"GET_RECENT_POSTS\",\r\n  GET_QUERY_ITEM: \"GET_QUERY_ITEM\"\r\n};\r\n\r\n// action constants, save article, save search terms, set new views\r\nexport const ADD_ARTICLE = \"ADD_ARTICLE\";\r\nexport const SET_VIEW = \"SET_VIEW\";\r\nexport const SAVE_QUERY = \"SAVE_QUERY\";\r\nexport const REQUEST_DATA = \"REQUEST_DATA\";\r\nexport const RECEIVE_DATA = \"RECEIVE_DATA\";\r\n","import {\r\n  articleView,\r\n  SET_VIEW,\r\n  SAVE_QUERY,\r\n  RECEIVE_DATA,\r\n  REQUEST_DATA\r\n} from \"./constants\";\r\nimport { combineReducers } from \"redux\";\r\n\r\n// Works, tested, returns state with new view option\r\nconst { GET_FRONT_PAGE } = articleView;\r\nconst selectView = (state = GET_FRONT_PAGE, action) => {\r\n  switch (action.type) {\r\n    case SET_VIEW:\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// In use, removed spread operator from action.query because it was\r\n// spreading string into separate pieces\r\nconst queries = (state = [], action) => {\r\n  switch (action.type) {\r\n    case SAVE_QUERY:\r\n      return [...state, action.query];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// works, adds articles and adds them to state\r\nconst articles = (state = { isFetching: false, articles: [] }, action) => {\r\n  switch (action.type) {\r\n    case REQUEST_DATA:\r\n      return Object.assign({}, state, {\r\n        isFetching: true\r\n      });\r\n    case RECEIVE_DATA:\r\n      return Object.assign({}, state, {\r\n        isFetching: false,\r\n        articles: action.data\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// the root reducer, combines all reducers\r\n// reducers split up and manage separate parts of state\r\nconst rootReducer = combineReducers({\r\n  selectView,\r\n  articles,\r\n  queries\r\n});\r\n\r\nexport default rootReducer;\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  getHomePage: function() {\r\n    return axios.get(`http://hn.algolia.com/api/v1/search?tags=front_page`);\r\n  },\r\n  getRecentPosts: function() {\r\n    return axios.get(`https://hn.algolia.com/api/v1/search_by_date?tags=story`);\r\n  },\r\n  searchQueryTerm: function(query) {\r\n    return axios.get(\r\n      `http://hn.algolia.com/api/v1/search?query=${query}&tags=story`\r\n    );\r\n  }\r\n};\r\n","import {\r\n  ADD_ARTICLE,\r\n  SAVE_QUERY,\r\n  SET_VIEW,\r\n  RECEIVE_DATA,\r\n  REQUEST_DATA,\r\n  articleView\r\n} from \"./constants\";\r\nimport API from \"./API\";\r\n\r\n// action creators\r\nexport function setArticleView(filter) {\r\n  return {\r\n    type: SET_VIEW,\r\n    filter\r\n  };\r\n}\r\n// trying out ES6 syntax, returning obj by enclosing in ()\r\nexport const addArticle = article => ({\r\n  type: ADD_ARTICLE,\r\n  article\r\n});\r\n\r\nexport const saveQuery = query => ({\r\n  type: SAVE_QUERY,\r\n  query\r\n});\r\n\r\nexport const requestData = () => ({\r\n  type: REQUEST_DATA\r\n});\r\n\r\nexport const receiveData = data => ({\r\n  type: RECEIVE_DATA,\r\n  data,\r\n  receivedAt: Date.now()\r\n});\r\n\r\n// default search, grabs front page posts\r\nexport const fetchArticles = () => {\r\n  return dispatch => {\r\n    dispatch(requestData());\r\n    dispatch(setArticleView(articleView.GET_FRONT_PAGE));\r\n    return API.getHomePage().then(response => {\r\n      const resp = response.data.hits;\r\n      dispatch(receiveData(resp));\r\n    });\r\n  };\r\n};\r\n\r\n// Ssearches HN for most recently posted articles\r\nexport const fetchRecent = () => {\r\n  return dispatch => {\r\n    dispatch(requestData());\r\n    dispatch(setArticleView(articleView.GET_RECENT_POSTS));\r\n    return API.getRecentPosts().then(response => {\r\n      const resp = response.data.hits;\r\n      dispatch(receiveData(resp));\r\n    });\r\n  };\r\n};\r\n\r\n// Uses API to search hn for search term\r\nexport const fetchQuery = queryTerm => {\r\n  return dispatch => {\r\n    // letting state know we are requesting data\r\n    dispatch(requestData());\r\n    // setting state reflect view section (get query items)\r\n    dispatch(setArticleView(articleView.GET_QUERY_ITEM));\r\n    return API.searchQueryTerm(queryTerm).then(response => {\r\n      const resp = response.data.hits;\r\n      dispatch(receiveData(resp));\r\n    });\r\n  };\r\n};\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\nimport { fetchArticles } from \"./actions\";\r\n\r\n// Store that will get passed to Reducer with thunk\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\n// Create Initial search of current front-page of HN\r\nstore.dispatch(fetchArticles()).then(() => console.log(store.getState()));\r\n\r\n// Old testing stuff, uncomment out for sum fun\r\n// store.dispatch(fetchArticles()).then(() => console.log(store.getState()));\r\n// store.dispatch(saveQuery(\"hi\"));\r\n// store.dispatch(saveQuery(\"hi\"));\r\nexport default store;\r\n","import React from \"react\";\r\n\r\nconst QueryListItem = props => (\r\n  <li id={props.id} onClick={props.onClick}>\r\n    <button className=\"waves-effect waves-light btn\" onClick={props.onClick}>\r\n      {\" \"}\r\n      {props.item}\r\n    </button>\r\n  </li>\r\n);\r\n\r\nexport default QueryListItem;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchQuery, saveQuery } from \"../utils/actions\";\r\n\r\n// The save and Search functions\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    save: term => dispatch(saveQuery(term)),\r\n    search: searchTerm => dispatch(fetchQuery(searchTerm))\r\n  };\r\n};\r\n\r\n// Wanted to try my hand at writing a hook and it was was easier than I thought\r\n// this form needs dispatch to save and search queries so i connected it to redux.\r\nconst ConnectedForm = props => {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <form\r\n        className=\"col s12 grey lighten-5\"\r\n        style={{ border: \"1px solid #212121\", padding: \".25rem\" }}\r\n      >\r\n        <div className=\"row\">\r\n          <div className=\"input-field col s6\">\r\n            <input\r\n              value={userInput}\r\n              onChange={e => setUserInput(e.target.value)}\r\n              placeholder={\"Enter Search\"}\r\n              type=\"text\"\r\n              name=\"user-input\"\r\n            />\r\n          </div>\r\n          <div className=\"input-field col s6\">\r\n            <button\r\n              className=\"waves-effect waves-light btn\"\r\n              type=\"submit\"\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                if (userInput !== \"\") {\r\n                  props.save(userInput);\r\n                  props.search(userInput);\r\n                  setUserInput(\"\");\r\n                }\r\n              }}\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Form = connect(null, mapDispatchToProps)(ConnectedForm);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport QueryListItem from \"../comps/QueryListItem\";\r\nimport Form from \"../comps/Form\";\r\nimport { fetchQuery } from \"../utils/actions\";\r\n\r\nconst styles = {\r\n  query: {\r\n    display: \"flex\",\r\n\r\n    backgroundColor: \"#fafafa\",\r\n    color: \"green\"\r\n  },\r\n  nav: {\r\n    backgroundColor: \"#ffd180\",\r\n    padding: \".25rem \"\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    search: searchTerm => dispatch(fetchQuery(searchTerm))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { queries: state.queries };\r\n};\r\n// connected nav component takes in queries (for now, might split later)\r\nconst ConnectedNav = props => (\r\n  <nav style={styles.nav}>\r\n    <div className=\"nav-form\">\r\n      <h4 id=\"search-hn-header\">Search HN</h4>\r\n      <Form />\r\n    </div>\r\n    <div className=\"queries\" style={styles.query}>\r\n      <ul>\r\n        {props.queries.map(item => (\r\n          <QueryListItem\r\n            key={item}\r\n            item={item}\r\n            id={item}\r\n            onClick={() => props.search(item)}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  </nav>\r\n);\r\n\r\nconst Nav = connect(mapStateToProps, mapDispatchToProps)(ConnectedNav);\r\nexport default Nav;\r\n","import React from \"react\";\r\n\r\n//might be bad practice, but I'm gonna hardcode the text when i call the buttons\r\n\r\nconst Button = ({ onClick, active, text }) => (\r\n  <button\r\n    onClick={onClick}\r\n    style={{\r\n      pointerEvents: active ? \"none\" : \"auto\",\r\n      backgroundColor: active ? \"gray\" : \"#2bbbad\"\r\n    }}\r\n    className=\"waves-effect waves-light btn\"\r\n  >\r\n    {text}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","// So this is a one of those container comps that\r\n// renders Buttons, which are my dumb presentation comps.\r\n// IRL this would probably be moved into the view area but\r\n// it's already basically done and I don't want to.\r\n\r\nimport React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"./Button\";\r\nimport { articleView } from \"../utils/constants\";\r\nimport { fetchArticles, fetchRecent } from \"../utils/actions\";\r\n\r\n// Constant destructured from constants.js\r\nconst { GET_FRONT_PAGE } = articleView;\r\n\r\n// State is needed here in order to change the\r\n// color/clickability of the buttons\r\nconst mapStateToProps = state => {\r\n  return { selectView: state.selectView };\r\n};\r\n\r\n// This is how I'm sending the buttons their\r\n// respective dispatch/onClick event.\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchFront: () => dispatch(fetchArticles()),\r\n    fetchNew: () => dispatch(fetchRecent())\r\n  };\r\n};\r\n\r\nconst ConnectedViewButton = props => {\r\n  // So, just off the cuff, i know this looks dumb as hell and\r\n  // it only works cause i have 2 buttons, but ya boi's brain\r\n  // is melting cause he can not figure out how to make this easier rn\r\n\r\n  let x, y;\r\n  if (props.selectView === GET_FRONT_PAGE) {\r\n    x = true;\r\n    y = false;\r\n  } else {\r\n    y = true;\r\n    x = false;\r\n  }\r\n  return (\r\n    <div\r\n      style={{\r\n        paddingRight: \"1rem\",\r\n        display: \"flex\",\r\n        width: \"20rem\",\r\n        height: \"100%\",\r\n        justifyContent: \"space-around\",\r\n        alignItems: \"center\"\r\n      }}\r\n    >\r\n      <Button active={x} onClick={props.fetchFront} text={\"Front Page\"} />{\" \"}\r\n      <Button active={y} onClick={props.fetchNew} text={\"Recent Posts\"} />{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ViewButton = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ConnectedViewButton);\r\n\r\nexport default ViewButton;\r\n","import React from \"react\";\r\nimport ViewButton from \"./ViewButton\";\r\nconst styles = {\r\n  head: {\r\n    color: \"#424242\",\r\n    fontSize: \"2rem\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    height: \"100%\"\r\n  },\r\n  text0: {\r\n    fontSize: \"2rem\",\r\n    textAlign: \"left\",\r\n    padding: \".25rem .5rem\",\r\n    border: \"1px solid #222\",\r\n    marginLeft: \"1rem\"\r\n  }\r\n};\r\n\r\nconst Header = () => (\r\n  <div\r\n    style={{\r\n      padding: 0,\r\n      borderBottom: \"1px solid rgba(0,0,0,0.14)\",\r\n      height: \"55px\"\r\n    }}\r\n  >\r\n    <header style={styles.head}>\r\n      <h1 style={styles.text0}>HN </h1>\r\n      <ViewButton />\r\n    </header>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst styles = {\r\n  outerCard: {\r\n    cursor: \"pointer\",\r\n    maxWidth: \"10rem\",\r\n    flexGrow: \"2\",\r\n    height: \"13.5rem\",\r\n    padding: \".25rem .75rem\",\r\n    display: \" flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"space-between\",\r\n    margin: \".5rem\"\r\n  },\r\n  text: {\r\n    textAlign: \"left\",\r\n    fontFamily: \"Courier New\",\r\n    fontWeight: 400,\r\n    fontSize: \"0.9rem\",\r\n    color: \"#212121\"\r\n  },\r\n  text2: {\r\n    textAlign: \"left\",\r\n    fontFamily: \"Courier New\",\r\n    fontWeight: 400,\r\n    fontSize: \"0.9rem\",\r\n    color: \"#212121\"\r\n  }\r\n};\r\n\r\nconst ArticleCard = ({ title, author, points, url }) => (\r\n  <div className=\"col\">\r\n    <div className=\"card blue-grey lighten-3\" style={styles.outerCard}>\r\n      <div className=\"header\">\r\n        <a\r\n          href={url}\r\n          rel=\"noreferrer noopener\"\r\n          className=\"card-title\"\r\n          target=\"_blank\"\r\n        >\r\n          <p style={styles.text}>{title}</p>\r\n        </a>\r\n      </div>\r\n      <div className=\"card-bottom\" style={styles.text2}>\r\n        <div className=\"score\">\r\n          Score:\r\n          <span className=\"deep-orange-text text-darken-3\">{points} </span>\r\n        </div>\r\n        <div className=\"author\">\r\n          By:\r\n          <span className=\"deep-orange-text text-darken-3\">{author} </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ArticleCard;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ArticleCard from \"../comps/ArticleCard\";\r\n\r\nconst mapStateToProps = state => {\r\n  return { articles: state.articles.articles };\r\n};\r\n\r\nconst ConnectedList = ({ articles }) => (\r\n  <>\r\n    <div\r\n      className=\"row\"\r\n      style={{\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        justifyContent: \"center\",\r\n        padding: \"0 1.25rem\"\r\n      }}\r\n    >\r\n      {/* Renders a presentational Article componenet */}\r\n      {articles.map((item, i) => (\r\n        <ArticleCard\r\n          key={i}\r\n          title={item.title}\r\n          url={item.url}\r\n          points={item.points}\r\n          author={item.author}\r\n        />\r\n      ))}\r\n    </div>\r\n  </>\r\n);\r\n\r\nconst ArticleList = connect(mapStateToProps)(ConnectedList);\r\n\r\nexport default ArticleList;\r\n","import React from \"react\";\r\nimport Nav from \"./Nav\";\r\n\r\nimport Header from \"../comps/Header\";\r\nimport ArticleList from \"./ArticleList\";\r\n\r\nconst Main = () => (\r\n  <div style={{ margin: 0 }} className=\"row\">\r\n    <div className=\"col s12 m3 l2\">\r\n      <Nav />\r\n    </div>\r\n    <div style={{ padding: 0 }} className=\"col s12 m9 l10\">\r\n      <Header />\r\n      <ArticleList />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Main;\r\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Main from \"./views/Main\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"../src/utils/store\";\r\n\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n// Wrapping entire APP comp with Provider with store. Store is\r\n// a default export from ./src/utils/index\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}