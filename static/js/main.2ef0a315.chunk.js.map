{"version":3,"sources":["utils/Redux/constants.js","utils/API/API.js","utils/Redux/actions.js","utils/Redux/reducers.js","components/Nav/Nav.js","components/Form/Form.js","components/Button/Button.js","components/Button/ViewButton.js","components/Header/Header.js","components/SearchTerms/QueryListItem.js","components/SearchTerms/QueryList.js","components/Article/ArticleCard.js","components/Article/ArticleList.js","app/Main.js","App.js","serviceWorker.js","utils/Redux/store/index.js","index.js"],"names":["articleView","SET_VIEW","axios","get","query","setArticleView","filter","type","receiveData","data","receivedAt","Date","now","fetchArticles","dispatch","API","then","response","resp","hits","fetchQuery","queryTerm","persistConfig","key","storage","whitelist","GET_FRONT_PAGE","rootReducer","combineReducers","selectView","state","action","articles","isFetching","Object","assign","queries","payload","pReducer","persistReducer","Nav","props","id","form","className","Form","connect","save","term","search","searchTerm","useState","userInput","setUserInput","style","border","padding","value","onChange","e","target","placeholder","name","onClick","preventDefault","Button","active","text","pointerEvents","backgroundColor","ViewButton","fetchFront","fetchNew","x","y","Header","QueryListItem","item","QueryList","map","ArticleCard","title","author","points","url","href","rel","ArticleList","i","Main","margin","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","store","createStore","applyMiddleware","thunkMiddleware","persistor","persistStore","configStore","ReactDOM","render","loading","onBeforeLift","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.2ef0a315.chunk.js","sourcesContent":["// view filter, i.e wchich articles to show\r\nexport const articleView = {\r\n  GET_FRONT_PAGE: \"GET_FRONT_PAGE\",\r\n  GET_RECENT_POSTS: \"GET_RECENT_POSTS\",\r\n  GET_QUERY_ITEM: \"GET_QUERY_ITEM\"\r\n};\r\n\r\n// action constants, save article, save search terms, set new views\r\nexport const ADD_ARTICLE = \"ADD_ARTICLE\";\r\nexport const SET_VIEW = \"SET_VIEW\";\r\nexport const SAVE_QUERY = \"SAVE_QUERY\";\r\nexport const REQUEST_DATA = \"REQUEST_DATA\";\r\nexport const RECEIVE_DATA = \"RECEIVE_DATA\";\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  getHomePage: function() {\r\n    return axios.get(`https://hn.algolia.com/api/v1/search?tags=front_page`);\r\n  },\r\n  getRecentPosts: function() {\r\n    return axios.get(`https://hn.algolia.com/api/v1/search_by_date?tags=story`);\r\n  },\r\n  searchQueryTerm: function(query) {\r\n    return axios.get(\r\n      `https://hn.algolia.com/api/v1/search?query=${query}&tags=story`\r\n    );\r\n  }\r\n};\r\n","import {\r\n  ADD_ARTICLE,\r\n  SAVE_QUERY,\r\n  SET_VIEW,\r\n  RECEIVE_DATA,\r\n  REQUEST_DATA,\r\n  articleView\r\n} from \"./constants\";\r\nimport API from \"../API/API\";\r\n\r\n// action creators\r\nexport function setArticleView(filter) {\r\n  return {\r\n    type: SET_VIEW,\r\n    filter\r\n  };\r\n}\r\n// trying out ES6 syntax, returning obj by enclosing in ()\r\nexport const addArticle = article => ({\r\n  type: ADD_ARTICLE,\r\n  article\r\n});\r\n\r\nexport const saveQuery = query => ({\r\n  type: SAVE_QUERY,\r\n  query\r\n});\r\n\r\nexport const requestData = () => ({\r\n  type: REQUEST_DATA\r\n});\r\n\r\nexport const receiveData = data => ({\r\n  type: RECEIVE_DATA,\r\n  data,\r\n  receivedAt: Date.now()\r\n});\r\n\r\n// default search, grabs front page posts\r\nexport const fetchArticles = () => {\r\n  return dispatch => {\r\n    dispatch(requestData());\r\n    dispatch(setArticleView(articleView.GET_FRONT_PAGE));\r\n    return API.getHomePage().then(response => {\r\n      const resp = response.data.hits;\r\n      dispatch(receiveData(resp));\r\n    });\r\n  };\r\n};\r\n\r\n// Ssearches HN for most recently posted articles\r\nexport const fetchRecent = () => {\r\n  return dispatch => {\r\n    dispatch(requestData());\r\n    dispatch(setArticleView(articleView.GET_RECENT_POSTS));\r\n    return API.getRecentPosts().then(response => {\r\n      const resp = response.data.hits;\r\n      dispatch(receiveData(resp));\r\n    });\r\n  };\r\n};\r\n\r\n// Uses API to search hn for search term\r\nexport const fetchQuery = queryTerm => {\r\n  return dispatch => {\r\n    // letting state know we are requesting data\r\n    dispatch(requestData());\r\n    // setting state reflect view section (get query items)\r\n    dispatch(setArticleView(articleView.GET_QUERY_ITEM));\r\n    return API.searchQueryTerm(queryTerm).then(response => {\r\n      const resp = response.data.hits;\r\n      dispatch(receiveData(resp));\r\n    });\r\n  };\r\n};\r\n","import {\r\n  articleView,\r\n  SET_VIEW,\r\n  SAVE_QUERY,\r\n  RECEIVE_DATA,\r\n  REQUEST_DATA\r\n} from \"./constants\";\r\nimport { combineReducers } from \"redux\";\r\nimport { persistReducer } from \"redux-persist\";\r\n\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\n// Config for persist\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n  whitelist: [\"queries\"]\r\n};\r\n\r\n// Works, tested, returns state with new view option\r\nconst { GET_FRONT_PAGE } = articleView;\r\nconst selectView = (state = GET_FRONT_PAGE, action) => {\r\n  switch (action.type) {\r\n    case SET_VIEW:\r\n      return action.filter;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// In use, removed spread operator from action.query because it was\r\n// spreading string into separate pieces\r\nconst queries = (state = [], action) => {\r\n  switch (action.type) {\r\n    case SAVE_QUERY:\r\n      return [...state, action.query];\r\n    case \"persist/REHYDRATE\":\r\n      if (action.payload) {\r\n        return [...action.payload.queries];\r\n      } else {\r\n        return state;\r\n      }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// works, adds articles and adds them to state\r\nconst articles = (state = { isFetching: false, articles: [] }, action) => {\r\n  switch (action.type) {\r\n    case REQUEST_DATA:\r\n      return Object.assign({}, state, {\r\n        isFetching: true\r\n      });\r\n    case RECEIVE_DATA:\r\n      return Object.assign({}, state, {\r\n        isFetching: false,\r\n        articles: action.data\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  selectView,\r\n  articles,\r\n  queries\r\n});\r\n\r\nconst pReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport default pReducer;\r\n","import React from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nconst Nav = props => (\r\n  <nav id=\"navbar\">\r\n    <div>\r\n      <h4 id=\"search-hn-header\">Search HN</h4>\r\n      {props.form}\r\n    </div>\r\n    <div className=\"queries\">{props.queries}</div>\r\n  </nav>\r\n);\r\n\r\nexport default Nav;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchQuery, saveQuery } from \"../../utils/Redux/actions\";\r\n\r\n// The save and Search functions\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    save: term => dispatch(saveQuery(term)),\r\n    search: searchTerm => dispatch(fetchQuery(searchTerm))\r\n  };\r\n};\r\n\r\n// Wanted to try my hand at writing a hook and it was was easier than I thought\r\n// this form needs dispatch to save and search queries so i connected it to redux.\r\nconst ConnectedForm = props => {\r\n  const [userInput, setUserInput] = useState(\"\");\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <form\r\n        className=\"col s12 grey lighten-5\"\r\n        style={{ border: \"1px solid #212121\", padding: \".25rem\" }}\r\n      >\r\n        <div className=\"row\">\r\n          <div className=\"input-field col s6\">\r\n            <input\r\n              value={userInput}\r\n              onChange={e => setUserInput(e.target.value)}\r\n              placeholder={\"Enter Search\"}\r\n              type=\"text\"\r\n              name=\"user-input\"\r\n            />\r\n          </div>\r\n          <div className=\"input-field col s6\">\r\n            <button\r\n              className=\"waves-effect waves-light btn\"\r\n              type=\"submit\"\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                if (userInput !== \"\") {\r\n                  props.save(userInput);\r\n                  props.search(userInput);\r\n                  setUserInput(\"\");\r\n                }\r\n              }}\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Form = connect(null, mapDispatchToProps)(ConnectedForm);\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\n//might be bad practice, but I'm gonna hardcode the text when i call the buttons\r\n\r\nconst Button = ({ onClick, active, text }) => (\r\n  <button\r\n    onClick={onClick}\r\n    style={{\r\n      pointerEvents: active ? \"none\" : \"auto\",\r\n      backgroundColor: active ? \"gray\" : \"#2bbbad\"\r\n    }}\r\n    className=\"waves-effect waves-light btn\"\r\n  >\r\n    {text}\r\n  </button>\r\n);\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Button from \"./Button\";\r\nimport { articleView } from \"../../utils/Redux/constants\";\r\nimport { fetchArticles, fetchRecent } from \"../../utils/Redux/actions\";\r\nimport \"./Button.css\";\r\n\r\n// Constant destructured from constants.js\r\nconst { GET_FRONT_PAGE } = articleView;\r\n\r\n// State is needed here in order to change the\r\n// color/clickability of the buttons\r\nconst mapStateToProps = state => {\r\n  return { selectView: state.selectView };\r\n};\r\n\r\n// This is how I'm sending the buttons their\r\n// respective dispatch/onClick event.\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchFront: () => dispatch(fetchArticles()),\r\n    fetchNew: () => dispatch(fetchRecent())\r\n  };\r\n};\r\n\r\nconst ConnectedViewButton = props => {\r\n  // lame\r\n\r\n  let x, y;\r\n  if (props.selectView === GET_FRONT_PAGE) {\r\n    x = true;\r\n    y = false;\r\n  } else {\r\n    y = true;\r\n    x = false;\r\n  }\r\n  return (\r\n    <div id=\"button-view\">\r\n      <Button active={x} onClick={props.fetchFront} text={\"Front Page\"} />{\" \"}\r\n      <Button active={y} onClick={props.fetchNew} text={\"Recent Posts\"} />{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ViewButton = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ConnectedViewButton);\r\n\r\nexport default ViewButton;\r\n","import React from \"react\";\r\nimport ViewButton from \"../Button/ViewButton\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => (\r\n  <div id=\"the-header-div\">\r\n    <header id=\"the-header\">\r\n      <h1 id=\"hn-h1\">HN </h1>\r\n      <ViewButton />\r\n    </header>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst QueryListItem = props => (\r\n  <li id={props.id} onClick={props.onClick}>\r\n    <button className=\"waves-effect waves-light btn\" onClick={props.onClick}>\r\n      {\" \"}\r\n      {props.item}\r\n    </button>\r\n  </li>\r\n);\r\n\r\nexport default QueryListItem;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchQuery } from \"../../utils/Redux/actions\";\r\nimport QueryListItem from \"./QueryListItem\";\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    search: searchTerm => dispatch(fetchQuery(searchTerm))\r\n  };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { queries: state.queries };\r\n};\r\n\r\nconst ConnectedQueryLists = props => (\r\n  <ul>\r\n    {props.queries.map(item => (\r\n      <QueryListItem\r\n        key={item}\r\n        item={item}\r\n        id={item}\r\n        onClick={() => props.search(item)}\r\n      />\r\n    ))}\r\n  </ul>\r\n);\r\nconst QueryList = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ConnectedQueryLists);\r\nexport default QueryList;\r\n","import React from \"react\";\r\nimport \"./Article.css\";\r\n\r\n\r\n\r\nconst ArticleCard = ({ title, author, points, url }) => (\r\n  <div className=\"col\">\r\n    <div className=\"card blue-grey lighten-3\">\r\n      <div className=\"header\">\r\n        <a\r\n          href={url}\r\n          rel=\"noreferrer noopener\"\r\n          className=\"card-title\"\r\n          target=\"_blank\"\r\n        >\r\n          <p className=\"article-headline\">{title}</p>\r\n        </a>\r\n      </div>\r\n      <div className=\"card-bottom\">\r\n        <div className=\"score\">\r\n          Score:\r\n          <span className=\"deep-orange-text text-darken-3\">{points} </span>\r\n        </div>\r\n        <div className=\"author\">\r\n          By:\r\n          <span className=\"deep-orange-text text-darken-3\">{author} </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ArticleCard;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ArticleCard from \"./ArticleCard\";\r\nimport \"./Article.css\"\r\n\r\nconst mapStateToProps = state => {\r\n  return { articles: state.articles.articles };\r\n};\r\n\r\nconst ConnectedList = ({ articles }) => (\r\n  <>\r\n    <div\r\n      className=\"row\"\r\n      id=\"connected-row\"\r\n\r\n    >\r\n      {/* Renders a presentational Article componenet */}\r\n      {articles.map((item, i) => (\r\n        <ArticleCard\r\n          key={i}\r\n          title={item.title}\r\n          url={item.url}\r\n          points={item.points}\r\n          author={item.author}\r\n        />\r\n      ))}\r\n    </div>\r\n  </>\r\n);\r\n\r\nconst ArticleList = connect(mapStateToProps)(ConnectedList);\r\n\r\nexport default ArticleList;\r\n","import React from \"react\";\r\nimport Nav from \"../components/Nav/Nav\";\r\nimport Form from \"../components/Form/Form\"\r\nimport Header from \"../components/Header/Header\";\r\nimport QueryList from \"../components/SearchTerms/QueryList\";\r\nimport ArticleList from \"../components/Article/ArticleList\";\r\n\r\nconst Main = () => (\r\n  <div style={{ margin: 0 }} className=\"row\">\r\n    <div className=\"col s12 m3 l2\">\r\n      <Nav\r\n        form={<Form />}\r\n        queries={<QueryList />}\r\n      />\r\n    </div>\r\n    <div style={{ padding: 0 }} className=\"col s12 m9 l10\">\r\n      <Header />\r\n      <ArticleList />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nimport \"./App.css\";\r\nimport Main from \"./app/Main\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Main />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Adding redux-persist imports 1/31/20\r\nimport { persistStore } from \"redux-persist\";\r\n\r\n// Typical Redux stuff\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { fetchArticles } from \"../actions\";\r\nimport pReducer from \"../reducers\";\r\n\r\n// Logging\r\n// import logger from \"redux-logger\";\r\n\r\n// New Persisting reducer\r\n\r\nexport default () => {\r\n  let store = createStore(pReducer, applyMiddleware(thunkMiddleware));\r\n  let persistor = persistStore(store);\r\n  store.dispatch(fetchArticles());\r\n  return { store, persistor };\r\n};\r\n\r\n// USe this if you want to log state\r\n// let store = createStore(pReducer, applyMiddleware(thunkMiddleware, logger));\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n// import store from \"./utils/Redux/store\";\r\nimport { PersistGate } from \"redux-persist/lib/integration/react\";\r\nimport configStore from \"./utils/Redux/store/\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nconst { persistor, store } = configStore();\r\n\r\nconst onBeforeLift = () => (\r\n  <div>\r\n    <p>Nothing to see here</p>\r\n  </div>\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate\r\n      loading={null}\r\n      onBeforeLift={onBeforeLift}\r\n      persistor={persistor}\r\n    >\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}