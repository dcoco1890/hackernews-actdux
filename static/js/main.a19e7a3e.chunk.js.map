{"version":3,"sources":["utils/constants.js","utils/reducers.js","utils/API/API.js","utils/actions.js","utils/store.js","components/Nav/Nav.js","components/Form/Form.js","components/Button/Button.js","components/Button/ViewButton.js","components/Header/Header.js","components/SearchTerms/QueryListItem.js","components/SearchTerms/QueryList.js","components/Article/ArticleCard.js","components/Article/ArticleList.js","app/Main.js","App.js","serviceWorker.js","index.js"],"names":["articleView","SET_VIEW","GET_FRONT_PAGE","rootReducer","combineReducers","selectView","state","action","type","filter","articles","isFetching","Object","assign","data","queries","query","axios","get","setArticleView","receiveData","receivedAt","Date","now","fetchArticles","dispatch","API","then","response","resp","hits","fetchQuery","queryTerm","store","createStore","applyMiddleware","thunkMiddleware","Nav","props","id","form","className","Form","connect","save","term","search","searchTerm","useState","userInput","setUserInput","style","border","padding","value","onChange","e","target","placeholder","name","onClick","preventDefault","Button","active","text","pointerEvents","backgroundColor","ViewButton","fetchFront","fetchNew","x","y","Header","QueryListItem","item","QueryList","map","key","ArticleCard","title","author","points","url","href","rel","ArticleList","i","Main","margin","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a19e7a3e.chunk.js","sourcesContent":["// view filter, i.e wchich articles to show\nexport const articleView = {\n  GET_FRONT_PAGE: \"GET_FRONT_PAGE\",\n  GET_RECENT_POSTS: \"GET_RECENT_POSTS\",\n  GET_QUERY_ITEM: \"GET_QUERY_ITEM\"\n};\n\n// action constants, save article, save search terms, set new views\nexport const ADD_ARTICLE = \"ADD_ARTICLE\";\nexport const SET_VIEW = \"SET_VIEW\";\nexport const SAVE_QUERY = \"SAVE_QUERY\";\nexport const REQUEST_DATA = \"REQUEST_DATA\";\nexport const RECEIVE_DATA = \"RECEIVE_DATA\";\n","import {\n  articleView,\n  SET_VIEW,\n  SAVE_QUERY,\n  RECEIVE_DATA,\n  REQUEST_DATA\n} from \"./constants\";\nimport { combineReducers } from \"redux\";\n\n// Works, tested, returns state with new view option\nconst { GET_FRONT_PAGE } = articleView;\nconst selectView = (state = GET_FRONT_PAGE, action) => {\n  switch (action.type) {\n    case SET_VIEW:\n      return action.filter;\n    default:\n      return state;\n  }\n};\n\n// In use, removed spread operator from action.query because it was\n// spreading string into separate pieces\nconst queries = (state = [], action) => {\n  switch (action.type) {\n    case SAVE_QUERY:\n      return [...state, action.query];\n    default:\n      return state;\n  }\n};\n\n// works, adds articles and adds them to state\nconst articles = (state = { isFetching: false, articles: [] }, action) => {\n  switch (action.type) {\n    case REQUEST_DATA:\n      return Object.assign({}, state, {\n        isFetching: true\n      });\n    case RECEIVE_DATA:\n      return Object.assign({}, state, {\n        isFetching: false,\n        articles: action.data\n      });\n    default:\n      return state;\n  }\n};\n\n// the root reducer, combines all reducers\n// reducers split up and manage separate parts of state\nconst rootReducer = combineReducers({\n  selectView,\n  articles,\n  queries\n});\n\nexport default rootReducer;\n","import axios from \"axios\";\n\nexport default {\n  getHomePage: function() {\n    return axios.get(`https://hn.algolia.com/api/v1/search?tags=front_page`);\n  },\n  getRecentPosts: function() {\n    return axios.get(`https://hn.algolia.com/api/v1/search_by_date?tags=story`);\n  },\n  searchQueryTerm: function(query) {\n    return axios.get(\n      `https://hn.algolia.com/api/v1/search?query=${query}&tags=story`\n    );\n  }\n};\n","import {\n  ADD_ARTICLE,\n  SAVE_QUERY,\n  SET_VIEW,\n  RECEIVE_DATA,\n  REQUEST_DATA,\n  articleView\n} from \"./constants\";\nimport API from \"./API/API\";\n\n// action creators\nexport function setArticleView(filter) {\n  return {\n    type: SET_VIEW,\n    filter\n  };\n}\n// trying out ES6 syntax, returning obj by enclosing in ()\nexport const addArticle = article => ({\n  type: ADD_ARTICLE,\n  article\n});\n\nexport const saveQuery = query => ({\n  type: SAVE_QUERY,\n  query\n});\n\nexport const requestData = () => ({\n  type: REQUEST_DATA\n});\n\nexport const receiveData = data => ({\n  type: RECEIVE_DATA,\n  data,\n  receivedAt: Date.now()\n});\n\n// default search, grabs front page posts\nexport const fetchArticles = () => {\n  return dispatch => {\n    dispatch(requestData());\n    dispatch(setArticleView(articleView.GET_FRONT_PAGE));\n    return API.getHomePage().then(response => {\n      const resp = response.data.hits;\n      dispatch(receiveData(resp));\n    });\n  };\n};\n\n// Ssearches HN for most recently posted articles\nexport const fetchRecent = () => {\n  return dispatch => {\n    dispatch(requestData());\n    dispatch(setArticleView(articleView.GET_RECENT_POSTS));\n    return API.getRecentPosts().then(response => {\n      const resp = response.data.hits;\n      dispatch(receiveData(resp));\n    });\n  };\n};\n\n// Uses API to search hn for search term\nexport const fetchQuery = queryTerm => {\n  return dispatch => {\n    // letting state know we are requesting data\n    dispatch(requestData());\n    // setting state reflect view section (get query items)\n    dispatch(setArticleView(articleView.GET_QUERY_ITEM));\n    return API.searchQueryTerm(queryTerm).then(response => {\n      const resp = response.data.hits;\n      dispatch(receiveData(resp));\n    });\n  };\n};\n","import { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\nimport { fetchArticles } from \"./actions\";\n\n// Store that will get passed to Reducer with thunk\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\n// Create Initial search of current front-page of HN\nstore.dispatch(fetchArticles())\n\nexport default store;\n","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n  <nav id=\"navbar\">\n    <div>\n      <h4 id=\"search-hn-header\">Search HN</h4>\n      {props.form}\n    </div>\n    <div className=\"queries\">{props.queries}</div>\n  </nav>\n);\n\nexport default Nav;\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchQuery, saveQuery } from \"../../utils/actions\";\n\n// The save and Search functions\nconst mapDispatchToProps = dispatch => {\n  return {\n    save: term => dispatch(saveQuery(term)),\n    search: searchTerm => dispatch(fetchQuery(searchTerm))\n  };\n};\n\n// Wanted to try my hand at writing a hook and it was was easier than I thought\n// this form needs dispatch to save and search queries so i connected it to redux.\nconst ConnectedForm = props => {\n  const [userInput, setUserInput] = useState(\"\");\n\n  return (\n    <div className=\"row\">\n      <form\n        className=\"col s12 grey lighten-5\"\n        style={{ border: \"1px solid #212121\", padding: \".25rem\" }}\n      >\n        <div className=\"row\">\n          <div className=\"input-field col s6\">\n            <input\n              value={userInput}\n              onChange={e => setUserInput(e.target.value)}\n              placeholder={\"Enter Search\"}\n              type=\"text\"\n              name=\"user-input\"\n            />\n          </div>\n          <div className=\"input-field col s6\">\n            <button\n              className=\"waves-effect waves-light btn\"\n              type=\"submit\"\n              onClick={e => {\n                e.preventDefault();\n                if (userInput !== \"\") {\n                  props.save(userInput);\n                  props.search(userInput);\n                  setUserInput(\"\");\n                }\n              }}\n            >\n              Search\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nconst Form = connect(null, mapDispatchToProps)(ConnectedForm);\n\nexport default Form;\n","import React from \"react\";\n\n//might be bad practice, but I'm gonna hardcode the text when i call the buttons\n\nconst Button = ({ onClick, active, text }) => (\n  <button\n    onClick={onClick}\n    style={{\n      pointerEvents: active ? \"none\" : \"auto\",\n      backgroundColor: active ? \"gray\" : \"#2bbbad\"\n    }}\n    className=\"waves-effect waves-light btn\"\n  >\n    {text}\n  </button>\n);\n\nexport default Button;\n","\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport Button from \"./Button\";\nimport { articleView } from \"../../utils/constants\";\nimport { fetchArticles, fetchRecent } from \"../../utils/actions\";\nimport \"./Button.css\"\n\n// Constant destructured from constants.js\nconst { GET_FRONT_PAGE } = articleView;\n\n// State is needed here in order to change the\n// color/clickability of the buttons\nconst mapStateToProps = state => {\n  return { selectView: state.selectView };\n};\n\n// This is how I'm sending the buttons their\n// respective dispatch/onClick event.\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchFront: () => dispatch(fetchArticles()),\n    fetchNew: () => dispatch(fetchRecent())\n  };\n};\n\nconst ConnectedViewButton = props => {\n// lame\n\n  let x, y;\n  if (props.selectView === GET_FRONT_PAGE) {\n    x = true;\n    y = false;\n  } else {\n    y = true;\n    x = false;\n  }\n  return (\n    <div\n    id=\"button-view\"\n    >\n      <Button active={x} onClick={props.fetchFront} text={\"Front Page\"} />{\" \"}\n      <Button active={y} onClick={props.fetchNew} text={\"Recent Posts\"} />{\" \"}\n    </div>\n  );\n};\n\nconst ViewButton = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConnectedViewButton);\n\nexport default ViewButton;\n","import React from \"react\";\nimport ViewButton from \"../Button/ViewButton\";\nimport \"./Header.css\";\n\nconst Header = () => (\n  <div id=\"the-header-div\">\n    <header id=\"the-header\">\n      <h1 id=\"hn-h1\">HN </h1>\n      <ViewButton />\n    </header>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\n\nconst QueryListItem = props => (\n  <li id={props.id} onClick={props.onClick}>\n    <button className=\"waves-effect waves-light btn\" onClick={props.onClick}>\n      {\" \"}\n      {props.item}\n    </button>\n  </li>\n);\n\nexport default QueryListItem;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { fetchQuery } from \"../../utils/actions\";\nimport QueryListItem from \"./QueryListItem\";\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    search: searchTerm => dispatch(fetchQuery(searchTerm))\n  };\n};\n\nconst mapStateToProps = state => {\n  return { queries: state.queries };\n};\n\nconst ConnectedQueryLists = props => (\n  <ul>\n    {props.queries.map(item => (\n      <QueryListItem\n        key={item}\n        item={item}\n        id={item}\n        onClick={() => props.search(item)}\n      />\n    ))}\n  </ul>\n);\nconst QueryList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ConnectedQueryLists);\nexport default QueryList;\n","import React from \"react\";\nimport \"./Article.css\";\n\n\n\nconst ArticleCard = ({ title, author, points, url }) => (\n  <div className=\"col\">\n    <div className=\"card blue-grey lighten-3\">\n      <div className=\"header\">\n        <a\n          href={url}\n          rel=\"noreferrer noopener\"\n          className=\"card-title\"\n          target=\"_blank\"\n        >\n          <p className=\"article-headline\">{title}</p>\n        </a>\n      </div>\n      <div className=\"card-bottom\">\n        <div className=\"score\">\n          Score:\n          <span className=\"deep-orange-text text-darken-3\">{points} </span>\n        </div>\n        <div className=\"author\">\n          By:\n          <span className=\"deep-orange-text text-darken-3\">{author} </span>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default ArticleCard;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport ArticleCard from \"./ArticleCard\";\nimport \"./Article.css\"\n\nconst mapStateToProps = state => {\n  return { articles: state.articles.articles };\n};\n\nconst ConnectedList = ({ articles }) => (\n  <>\n    <div\n      className=\"row\"\n      id=\"connected-row\"\n\n    >\n      {/* Renders a presentational Article componenet */}\n      {articles.map((item, i) => (\n        <ArticleCard\n          key={i}\n          title={item.title}\n          url={item.url}\n          points={item.points}\n          author={item.author}\n        />\n      ))}\n    </div>\n  </>\n);\n\nconst ArticleList = connect(mapStateToProps)(ConnectedList);\n\nexport default ArticleList;\n","import React from \"react\";\nimport Nav from \"../components/Nav/Nav\";\nimport Form from \"../components/Form/Form\"\nimport Header from \"../components/Header/Header\";\nimport QueryList from \"../components/SearchTerms/QueryList\";\nimport ArticleList from \"../components/Article/ArticleList\";\n\nconst Main = () => (\n  <div style={{ margin: 0 }} className=\"row\">\n    <div className=\"col s12 m3 l2\">\n      <Nav\n        form={<Form />}\n        queries={<QueryList />}\n      />\n    </div>\n    <div style={{ padding: 0 }} className=\"col s12 m9 l10\">\n      <Header />\n      <ArticleList />\n    </div>\n  </div>\n);\n\nexport default Main;\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Main from \"./app/Main\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"../src/utils/store\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// Wrapping entire APP comp with Provider with store. Store is\n// a default export from ./src/utils/index\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}